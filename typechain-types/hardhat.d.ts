/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "DVNOptions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DVNOptions__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuard__factory>;
    getContractFactory(
      name: "ILayerZeroDVN",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILayerZeroDVN__factory>;
    getContractFactory(
      name: "IReceiveULN",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IReceiveULN__factory>;
    getContractFactory(
      name: "IKeyRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IKeyRegistry__factory>;
    getContractFactory(
      name: "INetwork",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INetwork__factory>;
    getContractFactory(
      name: "ISettlement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISettlement__factory>;
    getContractFactory(
      name: "IValSetDriver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IValSetDriver__factory>;
    getContractFactory(
      name: "IVotingPowerProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVotingPowerProvider__factory>;
    getContractFactory(
      name: "KeyRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KeyRegistry__factory>;
    getContractFactory(
      name: "MockOperatorRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockOperatorRegistry__factory>;
    getContractFactory(
      name: "MockVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockVault__factory>;
    getContractFactory(
      name: "MockVaultFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockVaultFactory__factory>;
    getContractFactory(
      name: "Settlement",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Settlement__factory>;
    getContractFactory(
      name: "ValSetDriver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ValSetDriver__factory>;
    getContractFactory(
      name: "SymbioticDVN",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SymbioticDVN__factory>;
    getContractFactory(
      name: "VotingPowerProvider",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VotingPowerProvider__factory>;

    getContractAt(
      name: "DVNOptions",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DVNOptions>;
    getContractAt(
      name: "AccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Pausable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ReentrancyGuard",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuard>;
    getContractAt(
      name: "ILayerZeroDVN",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ILayerZeroDVN>;
    getContractAt(
      name: "IReceiveULN",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IReceiveULN>;
    getContractAt(
      name: "IKeyRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IKeyRegistry>;
    getContractAt(
      name: "INetwork",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.INetwork>;
    getContractAt(
      name: "ISettlement",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISettlement>;
    getContractAt(
      name: "IValSetDriver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IValSetDriver>;
    getContractAt(
      name: "IVotingPowerProvider",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IVotingPowerProvider>;
    getContractAt(
      name: "KeyRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.KeyRegistry>;
    getContractAt(
      name: "MockOperatorRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockOperatorRegistry>;
    getContractAt(
      name: "MockVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockVault>;
    getContractAt(
      name: "MockVaultFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockVaultFactory>;
    getContractAt(
      name: "Settlement",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Settlement>;
    getContractAt(
      name: "ValSetDriver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ValSetDriver>;
    getContractAt(
      name: "SymbioticDVN",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SymbioticDVN>;
    getContractAt(
      name: "VotingPowerProvider",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VotingPowerProvider>;

    deployContract(
      name: "DVNOptions",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DVNOptions>;
    deployContract(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "ReentrancyGuard",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "ILayerZeroDVN",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILayerZeroDVN>;
    deployContract(
      name: "IReceiveULN",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IReceiveULN>;
    deployContract(
      name: "IKeyRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IKeyRegistry>;
    deployContract(
      name: "INetwork",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.INetwork>;
    deployContract(
      name: "ISettlement",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISettlement>;
    deployContract(
      name: "IValSetDriver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IValSetDriver>;
    deployContract(
      name: "IVotingPowerProvider",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVotingPowerProvider>;
    deployContract(
      name: "KeyRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.KeyRegistry>;
    deployContract(
      name: "MockOperatorRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockOperatorRegistry>;
    deployContract(
      name: "MockVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockVault>;
    deployContract(
      name: "MockVaultFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockVaultFactory>;
    deployContract(
      name: "Settlement",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Settlement>;
    deployContract(
      name: "ValSetDriver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ValSetDriver>;
    deployContract(
      name: "SymbioticDVN",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SymbioticDVN>;
    deployContract(
      name: "VotingPowerProvider",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VotingPowerProvider>;

    deployContract(
      name: "DVNOptions",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DVNOptions>;
    deployContract(
      name: "AccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "IAccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "ERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "Pausable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "ReentrancyGuard",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ReentrancyGuard>;
    deployContract(
      name: "ILayerZeroDVN",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ILayerZeroDVN>;
    deployContract(
      name: "IReceiveULN",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IReceiveULN>;
    deployContract(
      name: "IKeyRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IKeyRegistry>;
    deployContract(
      name: "INetwork",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.INetwork>;
    deployContract(
      name: "ISettlement",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISettlement>;
    deployContract(
      name: "IValSetDriver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IValSetDriver>;
    deployContract(
      name: "IVotingPowerProvider",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVotingPowerProvider>;
    deployContract(
      name: "KeyRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.KeyRegistry>;
    deployContract(
      name: "MockOperatorRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockOperatorRegistry>;
    deployContract(
      name: "MockVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockVault>;
    deployContract(
      name: "MockVaultFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockVaultFactory>;
    deployContract(
      name: "Settlement",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Settlement>;
    deployContract(
      name: "ValSetDriver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ValSetDriver>;
    deployContract(
      name: "SymbioticDVN",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SymbioticDVN>;
    deployContract(
      name: "VotingPowerProvider",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VotingPowerProvider>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
