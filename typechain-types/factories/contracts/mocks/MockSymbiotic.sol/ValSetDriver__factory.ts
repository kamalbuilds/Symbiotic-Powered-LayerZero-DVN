/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  ValSetDriver,
  ValSetDriverInterface,
} from "../../../../contracts/mocks/MockSymbiotic.sol/ValSetDriver";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_votingPowerProvider",
        type: "address",
      },
      {
        internalType: "address",
        name: "_keyRegistry",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_quorumThreshold",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_minValidatorStake",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "epoch",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "validatorCount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "totalVotingPower",
        type: "uint256",
      },
    ],
    name: "ValidatorSetUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "currentEpoch",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "currentValidatorSet",
    outputs: [
      {
        internalType: "uint256",
        name: "totalVotingPower",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "epoch",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "merkleRoot",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentValidatorSet",
    outputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "validators",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "votingPowers",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "totalVotingPower",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "epoch",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "merkleRoot",
            type: "bytes32",
          },
        ],
        internalType: "struct ValSetDriver.ValidatorSet",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "epoch",
        type: "uint256",
      },
    ],
    name: "getValidatorSetAt",
    outputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "validators",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "votingPowers",
            type: "uint256[]",
          },
          {
            internalType: "uint256",
            name: "totalVotingPower",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "epoch",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "merkleRoot",
            type: "bytes32",
          },
        ],
        internalType: "struct ValSetDriver.ValidatorSet",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "historicalValidatorSets",
    outputs: [
      {
        internalType: "uint256",
        name: "totalVotingPower",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "epoch",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "merkleRoot",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "keyRegistry",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "minValidatorStake",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "quorumThreshold",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "validators",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "votingPowers",
        type: "uint256[]",
      },
    ],
    name: "updateValidatorSet",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "votingPowerProvider",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080346100a057601f610c0b38819003918201601f19168301916001600160401b038311848410176100a5578084926080946040528339810103126100a057610047816100bb565b90610054602082016100bb565b91606060408301519201519260018060a01b03908160018060a01b03199316836006541617600655169060075416176007556008556009556001600a55604051610b3b90816100d08239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100a05756fe608060408181526004918236101561001657600080fd5b600092833560e01c918263017ddd35146107e9575081630209fdd0146106ed578163086b5198146106c45781632771d123146105d05781632cdea7171461059e5781635949c58714610549578163766718081461052a5781637b7a91dd1461050b57816393c35c7f146100be575063f68f642e1461009357600080fd5b346100ba57816003193601126100ba5760065490516001600160a01b039091168152602090f35b5080fd5b839150346100ba57826003193601126100ba5767ffffffffffffffff928135848111610507576100f190369084016108ae565b9060249586358181116105035761010b90369087016108ae565b9590918685036104cf578793885b8881106104a35750600a549087519260209586850189606087018c83525260808601958d85905b8a8d821061047c57505050808703601f19018c8201528c87526001600160fb1b038d1161045b5761018489828f60051b8a818885829e013701038084520182610916565b519020948a5193610194856108e4565b61019d8b610979565b906101aa8d519283610916565b8b82528982018c60051b820191368311610477578b90915b83831061045f575050505084526101d88c610979565b9b6101e58c519d8e610916565b8c52878c019082019136831161045b578890915b83831061044b57509150508201998a5288820191878352606081019384526080810194855251998a5182811161043957600160401b9b8d8d8311610427579081838b935491558084106103ed575b50018d80528d5b8281106103c45750505051998a519182116103b25781116103a0578560019a8b54838d5580841061036a575b50018a8c528a8c5b83811061034a57505050505160025551600355518155600a548752600582528487208061031a575b50600a5495600019871461030857860180600a5586116102f657507fba2873c0bc3af930b5cd2d7f26200c9ae2ed4f0c9589ef4ef647f05e459ad75d949596508351928352820152a280f35b634e487b7160e01b8752601190528686fd5b634e487b7160e01b8852601182528888fd5b610323816109d6565b61032e878201610a5a565b60025460028201556003546003820155818054910155886102aa565b88835193019281600080516020610ae68339815191520155018b90610282565b8c8e85600080516020610ae68339815191529384019301905b8382106103925750505061027a565b81558a94508e91018f610383565b634e487b7160e01b8b52604185528b8bfd5b634e487b7160e01b8c52604186528c8cfd5b81516001600160a01b0316600080516020610ac68339815191528201559089019060010161024e565b8f84600080516020610ac68339815191529283019201905b828210610413575050610247565b600192939450815501908f918b9392610405565b634e487b7160e01b8152604189528f90fd5b634e487b7160e01b8d52604187528d8dfd5b82358152918101918991016101f9565b8d80fd5b819061046a84610965565b8152019101908b906101c2565b508f80fd5b9198909160019181906001600160a01b036104968d610965565b1681520199019101610140565b948560051b85013581018091116104bd5794600101610119565b634e487b7160e01b8a52601184528a8afd5b855162461bcd60e51b8152602081840152600f818b01526e098cadccee8d040dad2e6dac2e8c6d608b1b6044820152606490fd5b8680fd5b8380fd5b5050346100ba57816003193601126100ba576020906008549051908152f35b5050346100ba57816003193601126100ba57602090600a549051908152f35b9050823461059b57602036600319011261059b578261059791833581526005602052209260028401549260038501549401549051938493846040919493926060820195825260208201520152565b0390f35b80fd5b82843461059b578060031936011261059b57506002546003549254915190815260208101929092526040820152606090f35b8383346100ba57602092836003193601126106c0576105f0939293610938565b508035845260058352818420825193610608856108e4565b8351825480825283885282882083830191895b8181106106a35750505081610631910382610916565b8552600190600183019685519283838a549182815201998352838320925b818110610690575050505061066982610597980383610916565b85015260028101548385015260038101546060850152015460808301525191829182610805565b83548b529984019992820192820161064f565b82546001600160a01b03168452928501926001928301920161061b565b8280fd5b5050346100ba57816003193601126100ba5760075490516001600160a01b039091168152602090f35b919050346106c057826003193601126106c057610708610938565b50805191610715836108e4565b815193848154808752816020809801848052600080516020610ac683398151915292855b8a8282106107ca5750505061075092500382610916565b845282516001805480835281845260208301979293600080516020610ae6833981519152935b8282106107b557505050505061079181610597960382610916565b60208401526002548284015260035460608401525460808301525191829182610805565b84548a52988901989383019390830190610776565b85546001600160a01b0316845260019586019587955093019201610739565b8490346100ba57816003193601126100ba576020906009548152f35b6020808252825160a083830152805160c0840181905260e0840194929182019060005b8181106108915750505081810151838503601f190160408501528051808652948201949082019160005b82811061087d5750505050608081604060a09301516060850152606081015182850152015191015290565b835187529581019592810192600101610852565b82516001600160a01b031687529583019591830191600101610828565b9181601f840112156108df5782359167ffffffffffffffff83116108df576020808501948460051b0101116108df57565b600080fd5b60a0810190811067ffffffffffffffff82111761090057604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff82111761090057604052565b60405190610945826108e4565b600060808360608152606060208201528260408201528260608201520152565b35906001600160a01b03821682036108df57565b67ffffffffffffffff81116109005760051b60200190565b600160401b8211610900578054918082558281106109ae57505050565b600091600052602060002092830192015b8281106109cb57505050565b8181556001016109bf565b8015610a575760009081549167ffffffffffffffff8311610a4357906109fc8382610991565b815260208120600080516020610ac683398151915280545b848410610a22575050505050565b600191820180546001600160a01b0390921684860155939091019290610a14565b634e487b7160e01b81526041600452602490fd5b50565b906001808314610ac05760015467ffffffffffffffff811161090057610a808185610991565b600093845260208420600080516020610ae683398151915280545b838710610aab5750505050509050565b84809192019687549281850155019590610a9b565b50905056fe290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563b10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6a26469706673582212205e964c6ec27e6924e173081308171527fe4229597547e9c3002a3e1a9483353064736f6c63430008160033";

type ValSetDriverConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ValSetDriverConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ValSetDriver__factory extends ContractFactory {
  constructor(...args: ValSetDriverConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _votingPowerProvider: AddressLike,
    _keyRegistry: AddressLike,
    _quorumThreshold: BigNumberish,
    _minValidatorStake: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(
      _votingPowerProvider,
      _keyRegistry,
      _quorumThreshold,
      _minValidatorStake,
      overrides || {}
    );
  }
  override deploy(
    _votingPowerProvider: AddressLike,
    _keyRegistry: AddressLike,
    _quorumThreshold: BigNumberish,
    _minValidatorStake: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(
      _votingPowerProvider,
      _keyRegistry,
      _quorumThreshold,
      _minValidatorStake,
      overrides || {}
    ) as Promise<
      ValSetDriver & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ValSetDriver__factory {
    return super.connect(runner) as ValSetDriver__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ValSetDriverInterface {
    return new Interface(_abi) as ValSetDriverInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ValSetDriver {
    return new Contract(address, _abi, runner) as unknown as ValSetDriver;
  }
}
