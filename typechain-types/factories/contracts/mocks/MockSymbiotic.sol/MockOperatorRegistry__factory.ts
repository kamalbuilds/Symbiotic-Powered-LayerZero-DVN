/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  MockOperatorRegistry,
  MockOperatorRegistryInterface,
} from "../../../../contracts/mocks/MockSymbiotic.sol/MockOperatorRegistry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "OperatorDeregistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OperatorRegistered",
    type: "event",
  },
  {
    inputs: [],
    name: "deregisterOperator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getOperatorCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isOperatorRegistered",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "operatorList",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "operators",
    outputs: [
      {
        internalType: "bool",
        name: "isRegistered",
        type: "bool",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "string",
        name: "metadata",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "registeredAt",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "metadata",
        type: "string",
      },
    ],
    name: "registerOperator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576106c3908161001c8239f35b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c908163097c4af1146102ef5750806313e7c9d81461019c5780631a4a7c61146101795780636b1906f81461013c578063857dc190146100ab5763cb38f4071461006557600080fd5b346100a75760203660031901126100a75735916001548310156100a4575061008e602092610640565b905491519160018060a01b039160031b1c168152f35b80fd5b8280fd5b50346100a757826003193601126100a7573383528260205260ff828420541615610109575033825281602052812060ff198154169055337f6dd4ca66565fb3dee8076c654634c6c4ad949022d809d0394308617d6791218d8280a280f35b6020606492519162461bcd60e51b8352820152600e60248201526d139bdd081c9959da5cdd195c995960921b6044820152fd5b50346100a75760203660031901126100a757356001600160a01b038116908190036100a757818360ff926020955280855220541690519015158152f35b5050346101985781600319360112610198576020906001549051908152f35b5080fd5b5082346100a45760209182600319360112610198576001600160a01b03919035828116908190036101985781528083528381209283549460019460018101825196879186918154916101ed836105ce565b92838652886001821691826000146102c957505060011461028a575b505050916102246002926080949a989a979596970389610608565b0154928051978660ff8a98161515885260081c168587015285015284519283608086015281955b84871061027157505060a080955083850101526060830152601f80199101168101030190f35b86810182015188880160a001529581019587955061024b565b8852868820879350889291905b8284106102af57505050820101610224826080610209565b849295829585835492010152019101909286928a94610297565b60ff19168782015293151560051b86019093019350610224925084915060809050610209565b848385346100a7576020806003193601126105ca5767ffffffffffffffff9183358381116105c657366023820112156105c65780850135938085116105c257602497368987850101116105be5733885287855260ff8489205416610589575090829188935194608086018681108382111761057757845260019687875289828089019233845280601f199989519861038e858d601f860116018b610608565b828a520183890137860101528487019384526060870194428652338b528a83528a20965115159060ff885491610100600160a81b03905160081b169216906affffffffffffffffffffff60a81b161717865586860192518051928311610565576103f884546105ce565b601f811161051f575b5081601f84116001146104ba575060029550899190836104af575b5050600019600383901b1c191690861b1790555b519101558054916801000000000000000083101561049d5750818101905561045790610640565b81546001600160a01b0360039290921b91821b1916339182901b17909155807fa453db612af59e5521d6ab9284dc3e2d06af286eb1b1b7b771fce4716c19f2c18380a380f35b634e487b7160e01b8452604190528383fd5b015190508a8061041c565b9095918392899416858c52828c20928c905b8282106105065750509683600298106104ed575b505050811b019055610430565b015160001960f88460031b161c191690558a80806104e0565b838a015185558b969094019392830192908101906104cc565b848b52828b20601f850160051c81019184861061055b575b601f0160051c019089905b828110610550575050610401565b8c8155018990610542565b9091508190610537565b634e487b7160e01b8a52604189528a8afd5b634e487b7160e01b8a5260418952858afd5b62461bcd60e51b815286810185905260128982015271105b1c9958591e481c9959da5cdd195c995960721b6044820152606490fd5b8780fd5b8680fd5b8580fd5b8380fd5b90600182811c921680156105fe575b60208310146105e857565b634e487b7160e01b600052602260045260246000fd5b91607f16916105dd565b90601f8019910116810190811067ffffffffffffffff82111761062a57604052565b634e487b7160e01b600052604160045260246000fd5b6001548110156106775760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b634e487b7160e01b600052603260045260246000fdfea264697066735822122096da3f1a3a15377f9b3314714b07af9124bb3b0dde03c62a70d33e835a54abc364736f6c63430008160033";

type MockOperatorRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockOperatorRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockOperatorRegistry__factory extends ContractFactory {
  constructor(...args: MockOperatorRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockOperatorRegistry & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): MockOperatorRegistry__factory {
    return super.connect(runner) as MockOperatorRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockOperatorRegistryInterface {
    return new Interface(_abi) as MockOperatorRegistryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockOperatorRegistry {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as MockOperatorRegistry;
  }
}
