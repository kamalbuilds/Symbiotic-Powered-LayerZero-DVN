/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  KeyRegistry,
  KeyRegistryInterface,
} from "../../../../contracts/mocks/MockSymbiotic.sol/KeyRegistry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "validator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "blsKey",
        type: "bytes",
      },
    ],
    name: "KeyRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "validator",
        type: "address",
      },
    ],
    name: "KeyRevoked",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "validator",
        type: "address",
      },
    ],
    name: "getValidatorKey",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "blsPublicKey",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "proofOfPossession",
        type: "bytes",
      },
    ],
    name: "registerKey",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "revokeKey",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "validatorKeys",
    outputs: [
      {
        internalType: "bytes",
        name: "blsPublicKey",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "ecdsaPublicKey",
        type: "bytes",
      },
      {
        internalType: "bool",
        name: "isActive",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "registeredAt",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576107dd908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c80635c0569f81461058c5780636324c3a2146104f457806369021a5f146104a2576375ce011d1461004857600080fd5b3461042a57604036600319011261042a5760043567ffffffffffffffff811161042a57610079903690600401610779565b60243567ffffffffffffffff811161042a57610099903690600401610779565b905060308203610464571561042f57604051916100b583610656565b67ffffffffffffffff821161034d576040516100db601f8401601f191660200182610672565b828152368383011161042a578282602083013760006020848301015283526040516020810181811067ffffffffffffffff82111761034d57604052600081526020840152600160408401524260608401523360005260006020526040600020835180519067ffffffffffffffff821161034d57819061015a845461061c565b601f81116103da575b50602090601f831160011461036e57600092610363575b50508160011b916000199060031b1c19161781555b602084015180519067ffffffffffffffff821161034d576101b3600184015461061c565b601f8111610302575b50602090601f831160011461026c5795826003936060937f9b368ac41b4759b00feab16152db5d57270846c8d258ce8ab77ea58800b288f29899600092610261575b505060001982861b1c1916600191821b17908501555b600284016040820151151560ff80198354169116179055015191015582604051916020835281602084015260408301376000604084830101526040813394601f80199101168101030190a2005b0151905038806101fe565b906001840160005260206000209160005b601f19851681106102ea5750836060937f9b368ac41b4759b00feab16152db5d57270846c8d258ce8ab77ea58800b288f2989993600193600397601f198116106102d2575b505050811b016001850155610214565b015160001983881b60f8161c191690553880806102c2565b9192602060018192868501518155019401920161027d565b600184016000526020600020601f840160051c81019160208510610343575b601f0160051c01905b81811061033757506101bc565b6000815560010161032a565b9091508190610321565b634e487b7160e01b600052604160045260246000fd5b01519050388061017a565b9250836000526020600020906000935b601f19841685106103bf576001945083601f198116106103a6575b505050811b01815561018f565b015160001960f88460031b161c19169055388080610399565b8181015183556020948501946001909301929091019061037e565b909150836000526020600020601f840160051c810160208510610423575b90849392915b601f830160051c82018110610414575050610163565b600081558594506001016103fe565b50806103f8565b600080fd5b60405162461bcd60e51b815260206004820152600d60248201526c24b73b30b634b210383937b7b360991b6044820152606490fd5b60405162461bcd60e51b8152602060048201526016602482015275092dcecc2d8d2c8408498a640d6caf240d8cadccee8d60531b6044820152606490fd5b3461042a57600036600319011261042a57336000526000602052600260406000200160ff198154169055337f2863dd5cdaeee3db3572cb06d2252df0b2ed5fd16b2fe921c187ba89519247d3600080a2005b3461042a57602036600319011261042a576004356001600160a01b0381169081900361042a576000526000602052610582604060002060405161053681610656565b61053f82610694565b815261054d60018301610694565b6020820152600360ff600284015416151592836040840152015460608201525190604051928392604084526040840190610739565b9060208301520390f35b3461042a57602036600319011261042a576004356001600160a01b0381169081900361042a5760005260006020526105fd60406000206105cb81610694565b906105d860018201610694565b61060b600360ff60028501541693015491604051958695608087526080870190610739565b908582036020870152610739565b911515604084015260608301520390f35b90600182811c9216801561064c575b602083101461063657565b634e487b7160e01b600052602260045260246000fd5b91607f169161062b565b6080810190811067ffffffffffffffff82111761034d57604052565b90601f8019910116810190811067ffffffffffffffff82111761034d57604052565b906040519182600082546106a78161061c565b9081845260209460019160018116908160001461071757506001146106d8575b5050506106d692500383610672565b565b600090815285812095935091905b8183106106ff5750506106d693508201013880806106c7565b855488840185015294850194879450918301916106e6565b925050506106d694925060ff191682840152151560051b8201013880806106c7565b919082519283825260005b848110610765575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610744565b9181601f8401121561042a5782359167ffffffffffffffff831161042a576020838186019501011161042a5756fea264697066735822122013f5d58fbffbc80917777eb54feaeb87b047a5efc83f0c83d1bfc294f9de746464736f6c63430008160033";

type KeyRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: KeyRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class KeyRegistry__factory extends ContractFactory {
  constructor(...args: KeyRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      KeyRegistry & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): KeyRegistry__factory {
    return super.connect(runner) as KeyRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): KeyRegistryInterface {
    return new Interface(_abi) as KeyRegistryInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): KeyRegistry {
    return new Contract(address, _abi, runner) as unknown as KeyRegistry;
  }
}
