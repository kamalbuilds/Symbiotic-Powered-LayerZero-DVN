/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  MockVaultFactory,
  MockVaultFactoryInterface,
} from "../../../../contracts/mocks/MockSymbiotic.sol/MockVaultFactory";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "vault",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "VaultCreated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "createVault",
    outputs: [
      {
        internalType: "address",
        name: "vault",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getVaultsCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isVault",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "vaults",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60808060405234610016576105b5908161001c8239f35b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c918263652b9b41146101cb575081638c64ea4a14610183578163b4bd6f4614610072575063b9b658db1461005157600080fd5b3461006e578160031936011261006e576020906001549051908152f35b5080fd5b83833461006e57602036600319011261006e576001600160a01b03908335828116919082900361017f57805161032d8082019082821067ffffffffffffffff83111761016c576020918391610253833985815203019085f080156101625783169283855284602052818520600160ff198254161790556001546801000000000000000081101561014f5760209650917f5d9c31ffa0fecffd7cf379989a3c7af252f0335e0d2a1320b55245912c781f5391610134846001889601600155610205565b819291549060031b9186831b921b1916179055519480a38152f35b634e487b7160e01b865260418752602486fd5b81513d86823e3d90fd5b634e487b7160e01b875260418852602487fd5b8380fd5b9050346101c75760203660031901126101c75735916001548310156101c457506101ae602092610205565b905491519160018060a01b039160031b1c168152f35b80fd5b8280fd5b9291503461017f57602036600319011261017f57356001600160a01b0381169081900361017f578352602083815292205460ff1615158152f35b60015481101561023c5760016000527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60190600090565b634e487b7160e01b600052603260045260246000fdfe60803461007457601f61032d38819003918201601f19168301916001600160401b038311848410176100795780849260209460405283398101031261007457516001600160a01b0381169081900361007457600080546001600160a01b03191691909117905560405161029d90816100908239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040818152600436101561001457600080fd5b600091823560e01c90816316934fc4146101e8575080632e17de7814610160578063758aedd0146100eb5780638b0e9f3f146100cd5780638da5cb5b146100a65763a694fc3a1461006457600080fd5b346100a25760203660031901126100a25761009c90600435903384526001602052832061009282825461025a565b905560025461025a565b60025580f35b5080fd5b50346100a257816003193601126100a257905490516001600160a01b039091168152602090f35b50346100a257816003193601126100a2576020906002549051908152f35b50346100a25760603660031901126100a25761010561021c565b60443567ffffffffffffffff80821161015c573660238301121561015c57816004013590811161015c5736910160240111610158576001600160a01b031682526001602090815291819020549051908152f35b8280fd5b8480fd5b5090346101e55760203660031901126101e55760043533825260016020528083832054106101ac5761009c9192338452600160205283206101a2828254610237565b9055600254610237565b825162461bcd60e51b8152602060048201526012602482015271496e73756666696369656e74207374616b6560701b6044820152606490fd5b80fd5b91905034610158576020366003190112610158576020926001600160a01b0361020f61021c565b1681526001845220548152f35b600435906001600160a01b038216820361023257565b600080fd5b9190820391821161024457565b634e487b7160e01b600052601160045260246000fd5b919082018092116102445756fea2646970667358221220f166282ee6a5c7bb147669280171524a6540b586f59461f87a9984cd897cee3e64736f6c63430008160033a2646970667358221220972d4d80154ef55529c1369d51423dd198dd72faeca0094e102c441a98cea81964736f6c63430008160033";

type MockVaultFactoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockVaultFactoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockVaultFactory__factory extends ContractFactory {
  constructor(...args: MockVaultFactoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockVaultFactory & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockVaultFactory__factory {
    return super.connect(runner) as MockVaultFactory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockVaultFactoryInterface {
    return new Interface(_abi) as MockVaultFactoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockVaultFactory {
    return new Contract(address, _abi, runner) as unknown as MockVaultFactory;
  }
}
