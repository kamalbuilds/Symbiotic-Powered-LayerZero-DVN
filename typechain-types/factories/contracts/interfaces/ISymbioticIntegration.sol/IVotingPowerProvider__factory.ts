/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IVotingPowerProvider,
  IVotingPowerProviderInterface,
} from "../../../../contracts/interfaces/ISymbioticIntegration.sol/IVotingPowerProvider";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "hint",
        type: "bytes",
      },
    ],
    name: "getOperatorVotingPowerAt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "operators",
        type: "address[]",
      },
    ],
    name: "getOperatorVotingPowers",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "hint",
        type: "bytes",
      },
    ],
    name: "getTotalVotingPowerAt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IVotingPowerProvider__factory {
  static readonly abi = _abi;
  static createInterface(): IVotingPowerProviderInterface {
    return new Interface(_abi) as IVotingPowerProviderInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IVotingPowerProvider {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as IVotingPowerProvider;
  }
}
