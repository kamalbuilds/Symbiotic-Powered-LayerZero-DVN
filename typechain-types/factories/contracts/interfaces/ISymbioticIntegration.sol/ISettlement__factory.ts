/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ISettlement,
  ISettlementInterface,
} from "../../../../contracts/interfaces/ISymbioticIntegration.sol/ISettlement";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "epoch",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "headerHash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "commitValSetHeader",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getLatestValSetHeader",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "messageHash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "aggregatedSignature",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "nonSignerPubkeys",
        type: "bytes",
      },
    ],
    name: "verifySignature",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class ISettlement__factory {
  static readonly abi = _abi;
  static createInterface(): ISettlementInterface {
    return new Interface(_abi) as ISettlementInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ISettlement {
    return new Contract(address, _abi, runner) as unknown as ISettlement;
  }
}
