/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IKeyRegistry,
  IKeyRegistryInterface,
} from "../../../../contracts/interfaces/ISymbioticIntegration.sol/IKeyRegistry";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "getOperatorKey",
    outputs: [
      {
        internalType: "bytes",
        name: "blsKey",
        type: "bytes",
      },
      {
        internalType: "bool",
        name: "isActive",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "blsPublicKey",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "proofOfPossession",
        type: "bytes",
      },
    ],
    name: "registerKey",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IKeyRegistry__factory {
  static readonly abi = _abi;
  static createInterface(): IKeyRegistryInterface {
    return new Interface(_abi) as IKeyRegistryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IKeyRegistry {
    return new Contract(address, _abi, runner) as unknown as IKeyRegistry;
  }
}
