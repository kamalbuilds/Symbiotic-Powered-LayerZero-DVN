/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface KeyRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getValidatorKey"
      | "registerKey"
      | "revokeKey"
      | "validatorKeys"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "KeyRegistered" | "KeyRevoked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getValidatorKey",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerKey",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "revokeKey", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "validatorKeys",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getValidatorKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validatorKeys",
    data: BytesLike
  ): Result;
}

export namespace KeyRegisteredEvent {
  export type InputTuple = [validator: AddressLike, blsKey: BytesLike];
  export type OutputTuple = [validator: string, blsKey: string];
  export interface OutputObject {
    validator: string;
    blsKey: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace KeyRevokedEvent {
  export type InputTuple = [validator: AddressLike];
  export type OutputTuple = [validator: string];
  export interface OutputObject {
    validator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface KeyRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): KeyRegistry;
  waitForDeployment(): Promise<this>;

  interface: KeyRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getValidatorKey: TypedContractMethod<
    [validator: AddressLike],
    [[string, boolean]],
    "view"
  >;

  registerKey: TypedContractMethod<
    [blsPublicKey: BytesLike, proofOfPossession: BytesLike],
    [void],
    "nonpayable"
  >;

  revokeKey: TypedContractMethod<[], [void], "nonpayable">;

  validatorKeys: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, boolean, bigint] & {
        blsPublicKey: string;
        ecdsaPublicKey: string;
        isActive: boolean;
        registeredAt: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getValidatorKey"
  ): TypedContractMethod<[validator: AddressLike], [[string, boolean]], "view">;
  getFunction(
    nameOrSignature: "registerKey"
  ): TypedContractMethod<
    [blsPublicKey: BytesLike, proofOfPossession: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeKey"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validatorKeys"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, string, boolean, bigint] & {
        blsPublicKey: string;
        ecdsaPublicKey: string;
        isActive: boolean;
        registeredAt: bigint;
      }
    ],
    "view"
  >;

  getEvent(
    key: "KeyRegistered"
  ): TypedContractEvent<
    KeyRegisteredEvent.InputTuple,
    KeyRegisteredEvent.OutputTuple,
    KeyRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "KeyRevoked"
  ): TypedContractEvent<
    KeyRevokedEvent.InputTuple,
    KeyRevokedEvent.OutputTuple,
    KeyRevokedEvent.OutputObject
  >;

  filters: {
    "KeyRegistered(address,bytes)": TypedContractEvent<
      KeyRegisteredEvent.InputTuple,
      KeyRegisteredEvent.OutputTuple,
      KeyRegisteredEvent.OutputObject
    >;
    KeyRegistered: TypedContractEvent<
      KeyRegisteredEvent.InputTuple,
      KeyRegisteredEvent.OutputTuple,
      KeyRegisteredEvent.OutputObject
    >;

    "KeyRevoked(address)": TypedContractEvent<
      KeyRevokedEvent.InputTuple,
      KeyRevokedEvent.OutputTuple,
      KeyRevokedEvent.OutputObject
    >;
    KeyRevoked: TypedContractEvent<
      KeyRevokedEvent.InputTuple,
      KeyRevokedEvent.OutputTuple,
      KeyRevokedEvent.OutputObject
    >;
  };
}
