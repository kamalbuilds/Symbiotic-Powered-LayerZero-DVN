/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface MockOperatorRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deregisterOperator"
      | "getOperatorCount"
      | "isOperatorRegistered"
      | "operatorList"
      | "operators"
      | "registerOperator"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "OperatorDeregistered" | "OperatorRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "deregisterOperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isOperatorRegistered",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "operatorList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "operators",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerOperator",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "deregisterOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOperatorRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "operators", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerOperator",
    data: BytesLike
  ): Result;
}

export namespace OperatorDeregisteredEvent {
  export type InputTuple = [operator: AddressLike];
  export type OutputTuple = [operator: string];
  export interface OutputObject {
    operator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorRegisteredEvent {
  export type InputTuple = [operator: AddressLike, owner: AddressLike];
  export type OutputTuple = [operator: string, owner: string];
  export interface OutputObject {
    operator: string;
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface MockOperatorRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): MockOperatorRegistry;
  waitForDeployment(): Promise<this>;

  interface: MockOperatorRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deregisterOperator: TypedContractMethod<[], [void], "nonpayable">;

  getOperatorCount: TypedContractMethod<[], [bigint], "view">;

  isOperatorRegistered: TypedContractMethod<
    [operator: AddressLike],
    [boolean],
    "view"
  >;

  operatorList: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  operators: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, string, string, bigint] & {
        isRegistered: boolean;
        owner: string;
        metadata: string;
        registeredAt: bigint;
      }
    ],
    "view"
  >;

  registerOperator: TypedContractMethod<
    [metadata: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deregisterOperator"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getOperatorCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "isOperatorRegistered"
  ): TypedContractMethod<[operator: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "operatorList"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "operators"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, string, string, bigint] & {
        isRegistered: boolean;
        owner: string;
        metadata: string;
        registeredAt: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerOperator"
  ): TypedContractMethod<[metadata: string], [void], "nonpayable">;

  getEvent(
    key: "OperatorDeregistered"
  ): TypedContractEvent<
    OperatorDeregisteredEvent.InputTuple,
    OperatorDeregisteredEvent.OutputTuple,
    OperatorDeregisteredEvent.OutputObject
  >;
  getEvent(
    key: "OperatorRegistered"
  ): TypedContractEvent<
    OperatorRegisteredEvent.InputTuple,
    OperatorRegisteredEvent.OutputTuple,
    OperatorRegisteredEvent.OutputObject
  >;

  filters: {
    "OperatorDeregistered(address)": TypedContractEvent<
      OperatorDeregisteredEvent.InputTuple,
      OperatorDeregisteredEvent.OutputTuple,
      OperatorDeregisteredEvent.OutputObject
    >;
    OperatorDeregistered: TypedContractEvent<
      OperatorDeregisteredEvent.InputTuple,
      OperatorDeregisteredEvent.OutputTuple,
      OperatorDeregisteredEvent.OutputObject
    >;

    "OperatorRegistered(address,address)": TypedContractEvent<
      OperatorRegisteredEvent.InputTuple,
      OperatorRegisteredEvent.OutputTuple,
      OperatorRegisteredEvent.OutputObject
    >;
    OperatorRegistered: TypedContractEvent<
      OperatorRegisteredEvent.InputTuple,
      OperatorRegisteredEvent.OutputTuple,
      OperatorRegisteredEvent.OutputObject
    >;
  };
}
