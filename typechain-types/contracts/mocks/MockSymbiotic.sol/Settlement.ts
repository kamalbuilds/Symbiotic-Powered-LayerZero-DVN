/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface SettlementInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "commitValSetHeader"
      | "getLatestValSetHeader"
      | "networkId"
      | "valSetDriver"
      | "verifiedMessages"
      | "verifySignature"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "MessageVerified"): EventFragment;

  encodeFunctionData(
    functionFragment: "commitValSetHeader",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getLatestValSetHeader",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "networkId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "valSetDriver",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verifiedMessages",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySignature",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "commitValSetHeader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLatestValSetHeader",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "networkId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "valSetDriver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifiedMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySignature",
    data: BytesLike
  ): Result;
}

export namespace MessageVerifiedEvent {
  export type InputTuple = [messageHash: BytesLike];
  export type OutputTuple = [messageHash: string];
  export interface OutputObject {
    messageHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Settlement extends BaseContract {
  connect(runner?: ContractRunner | null): Settlement;
  waitForDeployment(): Promise<this>;

  interface: SettlementInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  commitValSetHeader: TypedContractMethod<
    [epoch: BigNumberish, headerHash: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  getLatestValSetHeader: TypedContractMethod<[], [[string, bigint]], "view">;

  networkId: TypedContractMethod<[], [bigint], "view">;

  valSetDriver: TypedContractMethod<[], [string], "view">;

  verifiedMessages: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  verifySignature: TypedContractMethod<
    [
      messageHash: BytesLike,
      aggregatedSignature: BytesLike,
      nonSignerPubkeys: BytesLike
    ],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "commitValSetHeader"
  ): TypedContractMethod<
    [epoch: BigNumberish, headerHash: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getLatestValSetHeader"
  ): TypedContractMethod<[], [[string, bigint]], "view">;
  getFunction(
    nameOrSignature: "networkId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "valSetDriver"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "verifiedMessages"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "verifySignature"
  ): TypedContractMethod<
    [
      messageHash: BytesLike,
      aggregatedSignature: BytesLike,
      nonSignerPubkeys: BytesLike
    ],
    [boolean],
    "view"
  >;

  getEvent(
    key: "MessageVerified"
  ): TypedContractEvent<
    MessageVerifiedEvent.InputTuple,
    MessageVerifiedEvent.OutputTuple,
    MessageVerifiedEvent.OutputObject
  >;

  filters: {
    "MessageVerified(bytes32)": TypedContractEvent<
      MessageVerifiedEvent.InputTuple,
      MessageVerifiedEvent.OutputTuple,
      MessageVerifiedEvent.OutputObject
    >;
    MessageVerified: TypedContractEvent<
      MessageVerifiedEvent.InputTuple,
      MessageVerifiedEvent.OutputTuple,
      MessageVerifiedEvent.OutputObject
    >;
  };
}
