/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace ValSetDriver {
  export type ValidatorSetStruct = {
    validators: AddressLike[];
    votingPowers: BigNumberish[];
    totalVotingPower: BigNumberish;
    epoch: BigNumberish;
    merkleRoot: BytesLike;
  };

  export type ValidatorSetStructOutput = [
    validators: string[],
    votingPowers: bigint[],
    totalVotingPower: bigint,
    epoch: bigint,
    merkleRoot: string
  ] & {
    validators: string[];
    votingPowers: bigint[];
    totalVotingPower: bigint;
    epoch: bigint;
    merkleRoot: string;
  };
}

export interface ValSetDriverInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "currentEpoch"
      | "currentValidatorSet"
      | "getCurrentValidatorSet"
      | "getValidatorSetAt"
      | "historicalValidatorSets"
      | "keyRegistry"
      | "minValidatorStake"
      | "quorumThreshold"
      | "updateValidatorSet"
      | "votingPowerProvider"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ValidatorSetUpdated"): EventFragment;

  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentValidatorSet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentValidatorSet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorSetAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "historicalValidatorSets",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "keyRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minValidatorStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quorumThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateValidatorSet",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "votingPowerProvider",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentValidatorSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentValidatorSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorSetAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "historicalValidatorSets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "keyRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minValidatorStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quorumThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateValidatorSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPowerProvider",
    data: BytesLike
  ): Result;
}

export namespace ValidatorSetUpdatedEvent {
  export type InputTuple = [
    epoch: BigNumberish,
    validatorCount: BigNumberish,
    totalVotingPower: BigNumberish
  ];
  export type OutputTuple = [
    epoch: bigint,
    validatorCount: bigint,
    totalVotingPower: bigint
  ];
  export interface OutputObject {
    epoch: bigint;
    validatorCount: bigint;
    totalVotingPower: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ValSetDriver extends BaseContract {
  connect(runner?: ContractRunner | null): ValSetDriver;
  waitForDeployment(): Promise<this>;

  interface: ValSetDriverInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  currentEpoch: TypedContractMethod<[], [bigint], "view">;

  currentValidatorSet: TypedContractMethod<
    [],
    [
      [bigint, bigint, string] & {
        totalVotingPower: bigint;
        epoch: bigint;
        merkleRoot: string;
      }
    ],
    "view"
  >;

  getCurrentValidatorSet: TypedContractMethod<
    [],
    [ValSetDriver.ValidatorSetStructOutput],
    "view"
  >;

  getValidatorSetAt: TypedContractMethod<
    [epoch: BigNumberish],
    [ValSetDriver.ValidatorSetStructOutput],
    "view"
  >;

  historicalValidatorSets: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string] & {
        totalVotingPower: bigint;
        epoch: bigint;
        merkleRoot: string;
      }
    ],
    "view"
  >;

  keyRegistry: TypedContractMethod<[], [string], "view">;

  minValidatorStake: TypedContractMethod<[], [bigint], "view">;

  quorumThreshold: TypedContractMethod<[], [bigint], "view">;

  updateValidatorSet: TypedContractMethod<
    [validators: AddressLike[], votingPowers: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  votingPowerProvider: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "currentEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "currentValidatorSet"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, string] & {
        totalVotingPower: bigint;
        epoch: bigint;
        merkleRoot: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCurrentValidatorSet"
  ): TypedContractMethod<[], [ValSetDriver.ValidatorSetStructOutput], "view">;
  getFunction(
    nameOrSignature: "getValidatorSetAt"
  ): TypedContractMethod<
    [epoch: BigNumberish],
    [ValSetDriver.ValidatorSetStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "historicalValidatorSets"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, string] & {
        totalVotingPower: bigint;
        epoch: bigint;
        merkleRoot: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "keyRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "minValidatorStake"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "quorumThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateValidatorSet"
  ): TypedContractMethod<
    [validators: AddressLike[], votingPowers: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "votingPowerProvider"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ValidatorSetUpdated"
  ): TypedContractEvent<
    ValidatorSetUpdatedEvent.InputTuple,
    ValidatorSetUpdatedEvent.OutputTuple,
    ValidatorSetUpdatedEvent.OutputObject
  >;

  filters: {
    "ValidatorSetUpdated(uint256,uint256,uint256)": TypedContractEvent<
      ValidatorSetUpdatedEvent.InputTuple,
      ValidatorSetUpdatedEvent.OutputTuple,
      ValidatorSetUpdatedEvent.OutputObject
    >;
    ValidatorSetUpdated: TypedContractEvent<
      ValidatorSetUpdatedEvent.InputTuple,
      ValidatorSetUpdatedEvent.OutputTuple,
      ValidatorSetUpdatedEvent.OutputObject
    >;
  };
}
