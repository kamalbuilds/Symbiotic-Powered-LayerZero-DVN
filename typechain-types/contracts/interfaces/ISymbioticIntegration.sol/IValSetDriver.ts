/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IValSetDriver {
  export type ValidatorSetStruct = {
    validators: AddressLike[];
    votingPowers: BigNumberish[];
    totalVotingPower: BigNumberish;
    epoch: BigNumberish;
    merkleRoot: BytesLike;
  };

  export type ValidatorSetStructOutput = [
    validators: string[],
    votingPowers: bigint[],
    totalVotingPower: bigint,
    epoch: bigint,
    merkleRoot: string
  ] & {
    validators: string[];
    votingPowers: bigint[];
    totalVotingPower: bigint;
    epoch: bigint;
    merkleRoot: string;
  };
}

export interface IValSetDriverInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getCurrentValidatorSet"
      | "getValidatorSetAt"
      | "updateValidatorSet"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getCurrentValidatorSet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorSetAt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateValidatorSet",
    values: [AddressLike[], BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "getCurrentValidatorSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorSetAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateValidatorSet",
    data: BytesLike
  ): Result;
}

export interface IValSetDriver extends BaseContract {
  connect(runner?: ContractRunner | null): IValSetDriver;
  waitForDeployment(): Promise<this>;

  interface: IValSetDriverInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getCurrentValidatorSet: TypedContractMethod<
    [],
    [IValSetDriver.ValidatorSetStructOutput],
    "view"
  >;

  getValidatorSetAt: TypedContractMethod<
    [epoch: BigNumberish],
    [IValSetDriver.ValidatorSetStructOutput],
    "view"
  >;

  updateValidatorSet: TypedContractMethod<
    [validators: AddressLike[], votingPowers: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getCurrentValidatorSet"
  ): TypedContractMethod<[], [IValSetDriver.ValidatorSetStructOutput], "view">;
  getFunction(
    nameOrSignature: "getValidatorSetAt"
  ): TypedContractMethod<
    [epoch: BigNumberish],
    [IValSetDriver.ValidatorSetStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateValidatorSet"
  ): TypedContractMethod<
    [validators: AddressLike[], votingPowers: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  filters: {};
}
