/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ILayerZeroDVN {
  export type AssignJobParamStruct = {
    srcEid: BigNumberish;
    dstEid: BigNumberish;
    header: BytesLike;
    payloadHash: BytesLike;
    confirmations: BigNumberish;
    sender: AddressLike;
  };

  export type AssignJobParamStructOutput = [
    srcEid: bigint,
    dstEid: bigint,
    header: string,
    payloadHash: string,
    confirmations: bigint,
    sender: string
  ] & {
    srcEid: bigint;
    dstEid: bigint;
    header: string;
    payloadHash: string;
    confirmations: bigint;
    sender: string;
  };
}

export interface ILayerZeroDVNInterface extends Interface {
  getFunction(nameOrSignature: "assignJob" | "getFee"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "assignJob",
    values: [ILayerZeroDVN.AssignJobParamStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [BigNumberish, BigNumberish, AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "assignJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
}

export interface ILayerZeroDVN extends BaseContract {
  connect(runner?: ContractRunner | null): ILayerZeroDVN;
  waitForDeployment(): Promise<this>;

  interface: ILayerZeroDVNInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  assignJob: TypedContractMethod<
    [_param: ILayerZeroDVN.AssignJobParamStruct, _options: BytesLike],
    [bigint],
    "payable"
  >;

  getFee: TypedContractMethod<
    [
      _dstEid: BigNumberish,
      _confirmations: BigNumberish,
      _sender: AddressLike,
      _options: BytesLike
    ],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "assignJob"
  ): TypedContractMethod<
    [_param: ILayerZeroDVN.AssignJobParamStruct, _options: BytesLike],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "getFee"
  ): TypedContractMethod<
    [
      _dstEid: BigNumberish,
      _confirmations: BigNumberish,
      _sender: AddressLike,
      _options: BytesLike
    ],
    [bigint],
    "view"
  >;

  filters: {};
}
