/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace VotingPowerProvider {
  export type VaultInfoStruct = {
    vaultAddress: AddressLike;
    weight: BigNumberish;
    isActive: boolean;
    addedAt: BigNumberish;
  };

  export type VaultInfoStructOutput = [
    vaultAddress: string,
    weight: bigint,
    isActive: boolean,
    addedAt: bigint
  ] & {
    vaultAddress: string;
    weight: bigint;
    isActive: boolean;
    addedAt: bigint;
  };
}

export interface VotingPowerProviderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "OPERATOR_ROLE"
      | "VAULT_MANAGER_ROLE"
      | "addOperatorVault"
      | "clearVotingPowerOverride"
      | "getOperatorVaults"
      | "getOperatorVotingPowerAt"
      | "getOperatorVotingPowers"
      | "getRoleAdmin"
      | "getTotalVotingPowerAt"
      | "getVaultInfo"
      | "grantRole"
      | "hasMinimumStake"
      | "hasRole"
      | "maxVotingPowerCap"
      | "minStakeRequired"
      | "networkId"
      | "operatorRegistry"
      | "operatorVaults"
      | "registerVault"
      | "renounceRole"
      | "revokeRole"
      | "setMaxVotingPowerCap"
      | "setMinStakeRequired"
      | "setVotingPowerOverride"
      | "supportsInterface"
      | "totalOperators"
      | "updateVaultWeight"
      | "vaultFactory"
      | "vaultWeights"
      | "votingPowerOverrides"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MaxVotingPowerCapUpdated"
      | "MinStakeRequiredUpdated"
      | "OperatorVaultAdded"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "VaultRegistered"
      | "VaultRemoved"
      | "VaultWeightUpdated"
      | "VotingPowerOverrideSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VAULT_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addOperatorVault",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "clearVotingPowerOverride",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorVaults",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorVotingPowerAt",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorVotingPowers",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalVotingPowerAt",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVaultInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasMinimumStake",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maxVotingPowerCap",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minStakeRequired",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "networkId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "operatorRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operatorVaults",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerVault",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxVotingPowerCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinStakeRequired",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotingPowerOverride",
    values: [AddressLike, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalOperators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateVaultWeight",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vaultFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vaultWeights",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "votingPowerOverrides",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VAULT_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addOperatorVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearVotingPowerOverride",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorVotingPowerAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorVotingPowers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalVotingPowerAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVaultInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasMinimumStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxVotingPowerCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minStakeRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "networkId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "operatorRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorVaults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVault",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxVotingPowerCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinStakeRequired",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotingPowerOverride",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVaultWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vaultWeights",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPowerOverrides",
    data: BytesLike
  ): Result;
}

export namespace MaxVotingPowerCapUpdatedEvent {
  export type InputTuple = [newCap: BigNumberish];
  export type OutputTuple = [newCap: bigint];
  export interface OutputObject {
    newCap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinStakeRequiredUpdatedEvent {
  export type InputTuple = [newMinStake: BigNumberish];
  export type OutputTuple = [newMinStake: bigint];
  export interface OutputObject {
    newMinStake: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorVaultAddedEvent {
  export type InputTuple = [operator: AddressLike, vault: AddressLike];
  export type OutputTuple = [operator: string, vault: string];
  export interface OutputObject {
    operator: string;
    vault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultRegisteredEvent {
  export type InputTuple = [vault: AddressLike, weight: BigNumberish];
  export type OutputTuple = [vault: string, weight: bigint];
  export interface OutputObject {
    vault: string;
    weight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultRemovedEvent {
  export type InputTuple = [vault: AddressLike];
  export type OutputTuple = [vault: string];
  export interface OutputObject {
    vault: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultWeightUpdatedEvent {
  export type InputTuple = [vault: AddressLike, newWeight: BigNumberish];
  export type OutputTuple = [vault: string, newWeight: bigint];
  export interface OutputObject {
    vault: string;
    newWeight: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingPowerOverrideSetEvent {
  export type InputTuple = [
    operator: AddressLike,
    customPower: BigNumberish,
    expiry: BigNumberish
  ];
  export type OutputTuple = [
    operator: string,
    customPower: bigint,
    expiry: bigint
  ];
  export interface OutputObject {
    operator: string;
    customPower: bigint;
    expiry: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface VotingPowerProvider extends BaseContract {
  connect(runner?: ContractRunner | null): VotingPowerProvider;
  waitForDeployment(): Promise<this>;

  interface: VotingPowerProviderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  VAULT_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  addOperatorVault: TypedContractMethod<
    [operator: AddressLike, vault: AddressLike],
    [void],
    "nonpayable"
  >;

  clearVotingPowerOverride: TypedContractMethod<
    [operator: AddressLike],
    [void],
    "nonpayable"
  >;

  getOperatorVaults: TypedContractMethod<
    [operator: AddressLike],
    [string[]],
    "view"
  >;

  getOperatorVotingPowerAt: TypedContractMethod<
    [operator: AddressLike, timestamp: BigNumberish, hint: BytesLike],
    [bigint],
    "view"
  >;

  getOperatorVotingPowers: TypedContractMethod<
    [operators: AddressLike[]],
    [bigint[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTotalVotingPowerAt: TypedContractMethod<
    [timestamp: BigNumberish, hint: BytesLike],
    [bigint],
    "view"
  >;

  getVaultInfo: TypedContractMethod<
    [vault: AddressLike],
    [VotingPowerProvider.VaultInfoStructOutput],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasMinimumStake: TypedContractMethod<
    [operator: AddressLike],
    [boolean],
    "view"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  maxVotingPowerCap: TypedContractMethod<[], [bigint], "view">;

  minStakeRequired: TypedContractMethod<[], [bigint], "view">;

  networkId: TypedContractMethod<[], [bigint], "view">;

  operatorRegistry: TypedContractMethod<[], [string], "view">;

  operatorVaults: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  registerVault: TypedContractMethod<
    [vault: AddressLike, weight: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setMaxVotingPowerCap: TypedContractMethod<
    [newCap: BigNumberish],
    [void],
    "nonpayable"
  >;

  setMinStakeRequired: TypedContractMethod<
    [newMinStake: BigNumberish],
    [void],
    "nonpayable"
  >;

  setVotingPowerOverride: TypedContractMethod<
    [
      operator: AddressLike,
      customPower: BigNumberish,
      duration: BigNumberish,
      reason: string
    ],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  totalOperators: TypedContractMethod<[], [bigint], "view">;

  updateVaultWeight: TypedContractMethod<
    [vault: AddressLike, newWeight: BigNumberish],
    [void],
    "nonpayable"
  >;

  vaultFactory: TypedContractMethod<[], [string], "view">;

  vaultWeights: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  votingPowerOverrides: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint, string] & {
        isActive: boolean;
        customPower: bigint;
        expiryTimestamp: bigint;
        reason: string;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VAULT_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addOperatorVault"
  ): TypedContractMethod<
    [operator: AddressLike, vault: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "clearVotingPowerOverride"
  ): TypedContractMethod<[operator: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getOperatorVaults"
  ): TypedContractMethod<[operator: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getOperatorVotingPowerAt"
  ): TypedContractMethod<
    [operator: AddressLike, timestamp: BigNumberish, hint: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOperatorVotingPowers"
  ): TypedContractMethod<[operators: AddressLike[]], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTotalVotingPowerAt"
  ): TypedContractMethod<
    [timestamp: BigNumberish, hint: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVaultInfo"
  ): TypedContractMethod<
    [vault: AddressLike],
    [VotingPowerProvider.VaultInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasMinimumStake"
  ): TypedContractMethod<[operator: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "maxVotingPowerCap"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "minStakeRequired"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "networkId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "operatorRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "operatorVaults"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerVault"
  ): TypedContractMethod<
    [vault: AddressLike, weight: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMaxVotingPowerCap"
  ): TypedContractMethod<[newCap: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMinStakeRequired"
  ): TypedContractMethod<[newMinStake: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setVotingPowerOverride"
  ): TypedContractMethod<
    [
      operator: AddressLike,
      customPower: BigNumberish,
      duration: BigNumberish,
      reason: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "totalOperators"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateVaultWeight"
  ): TypedContractMethod<
    [vault: AddressLike, newWeight: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "vaultFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "vaultWeights"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "votingPowerOverrides"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint, string] & {
        isActive: boolean;
        customPower: bigint;
        expiryTimestamp: bigint;
        reason: string;
      }
    ],
    "view"
  >;

  getEvent(
    key: "MaxVotingPowerCapUpdated"
  ): TypedContractEvent<
    MaxVotingPowerCapUpdatedEvent.InputTuple,
    MaxVotingPowerCapUpdatedEvent.OutputTuple,
    MaxVotingPowerCapUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MinStakeRequiredUpdated"
  ): TypedContractEvent<
    MinStakeRequiredUpdatedEvent.InputTuple,
    MinStakeRequiredUpdatedEvent.OutputTuple,
    MinStakeRequiredUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OperatorVaultAdded"
  ): TypedContractEvent<
    OperatorVaultAddedEvent.InputTuple,
    OperatorVaultAddedEvent.OutputTuple,
    OperatorVaultAddedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "VaultRegistered"
  ): TypedContractEvent<
    VaultRegisteredEvent.InputTuple,
    VaultRegisteredEvent.OutputTuple,
    VaultRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "VaultRemoved"
  ): TypedContractEvent<
    VaultRemovedEvent.InputTuple,
    VaultRemovedEvent.OutputTuple,
    VaultRemovedEvent.OutputObject
  >;
  getEvent(
    key: "VaultWeightUpdated"
  ): TypedContractEvent<
    VaultWeightUpdatedEvent.InputTuple,
    VaultWeightUpdatedEvent.OutputTuple,
    VaultWeightUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "VotingPowerOverrideSet"
  ): TypedContractEvent<
    VotingPowerOverrideSetEvent.InputTuple,
    VotingPowerOverrideSetEvent.OutputTuple,
    VotingPowerOverrideSetEvent.OutputObject
  >;

  filters: {
    "MaxVotingPowerCapUpdated(uint256)": TypedContractEvent<
      MaxVotingPowerCapUpdatedEvent.InputTuple,
      MaxVotingPowerCapUpdatedEvent.OutputTuple,
      MaxVotingPowerCapUpdatedEvent.OutputObject
    >;
    MaxVotingPowerCapUpdated: TypedContractEvent<
      MaxVotingPowerCapUpdatedEvent.InputTuple,
      MaxVotingPowerCapUpdatedEvent.OutputTuple,
      MaxVotingPowerCapUpdatedEvent.OutputObject
    >;

    "MinStakeRequiredUpdated(uint256)": TypedContractEvent<
      MinStakeRequiredUpdatedEvent.InputTuple,
      MinStakeRequiredUpdatedEvent.OutputTuple,
      MinStakeRequiredUpdatedEvent.OutputObject
    >;
    MinStakeRequiredUpdated: TypedContractEvent<
      MinStakeRequiredUpdatedEvent.InputTuple,
      MinStakeRequiredUpdatedEvent.OutputTuple,
      MinStakeRequiredUpdatedEvent.OutputObject
    >;

    "OperatorVaultAdded(address,address)": TypedContractEvent<
      OperatorVaultAddedEvent.InputTuple,
      OperatorVaultAddedEvent.OutputTuple,
      OperatorVaultAddedEvent.OutputObject
    >;
    OperatorVaultAdded: TypedContractEvent<
      OperatorVaultAddedEvent.InputTuple,
      OperatorVaultAddedEvent.OutputTuple,
      OperatorVaultAddedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "VaultRegistered(address,uint256)": TypedContractEvent<
      VaultRegisteredEvent.InputTuple,
      VaultRegisteredEvent.OutputTuple,
      VaultRegisteredEvent.OutputObject
    >;
    VaultRegistered: TypedContractEvent<
      VaultRegisteredEvent.InputTuple,
      VaultRegisteredEvent.OutputTuple,
      VaultRegisteredEvent.OutputObject
    >;

    "VaultRemoved(address)": TypedContractEvent<
      VaultRemovedEvent.InputTuple,
      VaultRemovedEvent.OutputTuple,
      VaultRemovedEvent.OutputObject
    >;
    VaultRemoved: TypedContractEvent<
      VaultRemovedEvent.InputTuple,
      VaultRemovedEvent.OutputTuple,
      VaultRemovedEvent.OutputObject
    >;

    "VaultWeightUpdated(address,uint256)": TypedContractEvent<
      VaultWeightUpdatedEvent.InputTuple,
      VaultWeightUpdatedEvent.OutputTuple,
      VaultWeightUpdatedEvent.OutputObject
    >;
    VaultWeightUpdated: TypedContractEvent<
      VaultWeightUpdatedEvent.InputTuple,
      VaultWeightUpdatedEvent.OutputTuple,
      VaultWeightUpdatedEvent.OutputObject
    >;

    "VotingPowerOverrideSet(address,uint256,uint256)": TypedContractEvent<
      VotingPowerOverrideSetEvent.InputTuple,
      VotingPowerOverrideSetEvent.OutputTuple,
      VotingPowerOverrideSetEvent.OutputObject
    >;
    VotingPowerOverrideSet: TypedContractEvent<
      VotingPowerOverrideSetEvent.InputTuple,
      VotingPowerOverrideSetEvent.OutputTuple,
      VotingPowerOverrideSetEvent.OutputObject
    >;
  };
}
