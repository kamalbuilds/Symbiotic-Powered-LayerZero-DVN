/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace ILayerZeroDVN {
  export type AssignJobParamStruct = {
    srcEid: BigNumberish;
    dstEid: BigNumberish;
    header: BytesLike;
    payloadHash: BytesLike;
    confirmations: BigNumberish;
    sender: AddressLike;
  };

  export type AssignJobParamStructOutput = [
    srcEid: bigint,
    dstEid: bigint,
    header: string,
    payloadHash: string,
    confirmations: bigint,
    sender: string
  ] & {
    srcEid: bigint;
    dstEid: bigint;
    header: string;
    payloadHash: string;
    confirmations: bigint;
    sender: string;
  };
}

export declare namespace SymbioticDVN {
  export type VerificationJobStruct = {
    headerHash: BytesLike;
    payloadHash: BytesLike;
    confirmations: BigNumberish;
    dstEid: BigNumberish;
    sender: AddressLike;
    fee: BigNumberish;
    timestamp: BigNumberish;
    verified: boolean;
    additionalData: BytesLike;
  };

  export type VerificationJobStructOutput = [
    headerHash: string,
    payloadHash: string,
    confirmations: bigint,
    dstEid: bigint,
    sender: string,
    fee: bigint,
    timestamp: bigint,
    verified: boolean,
    additionalData: string
  ] & {
    headerHash: string;
    payloadHash: string;
    confirmations: bigint;
    dstEid: bigint;
    sender: string;
    fee: bigint;
    timestamp: bigint;
    verified: boolean;
    additionalData: string;
  };
}

export interface SymbioticDVNInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "assignJob"
      | "feeConfigs"
      | "getFee"
      | "getJob"
      | "getSupportedChains"
      | "isJobVerified"
      | "messageLibs"
      | "minValidatorStake"
      | "owner"
      | "pause"
      | "paused"
      | "quorumThreshold"
      | "renounceOwnership"
      | "setFeeConfig"
      | "setMessageLib"
      | "setQuorumThreshold"
      | "setTreasury"
      | "setUlnLookup"
      | "setWorker"
      | "settlement"
      | "submitVerification"
      | "supportedChains"
      | "symbioticNetworkId"
      | "transferOwnership"
      | "treasury"
      | "ulnLookup"
      | "unpause"
      | "validators"
      | "verificationJobs"
      | "votingPowerProvider"
      | "worker"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FeeConfigUpdated"
      | "JobAssigned"
      | "JobVerified"
      | "OwnershipTransferred"
      | "Paused"
      | "QuorumThresholdUpdated"
      | "TreasuryUpdated"
      | "Unpaused"
      | "ValidatorUpdated"
      | "WorkerUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "assignJob",
    values: [ILayerZeroDVN.AssignJobParamStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feeConfigs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [BigNumberish, BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getJob", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getSupportedChains",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isJobVerified",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "messageLibs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minValidatorStake",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "quorumThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeConfig",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMessageLib",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setQuorumThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUlnLookup",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWorker",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "settlement",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitVerification",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportedChains",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "symbioticNetworkId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ulnLookup",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "validators",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verificationJobs",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "votingPowerProvider",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "worker", values?: undefined): string;

  decodeFunctionResult(functionFragment: "assignJob", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeConfigs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getJob", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSupportedChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isJobVerified",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "messageLibs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minValidatorStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMessageLib",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setQuorumThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUlnLookup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setWorker", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settlement", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitVerification",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportedChains",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "symbioticNetworkId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ulnLookup", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "validators", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verificationJobs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPowerProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "worker", data: BytesLike): Result;
}

export namespace FeeConfigUpdatedEvent {
  export type InputTuple = [
    dstEid: BigNumberish,
    baseFee: BigNumberish,
    perByteRate: BigNumberish,
    confirmationMultiplier: BigNumberish
  ];
  export type OutputTuple = [
    dstEid: bigint,
    baseFee: bigint,
    perByteRate: bigint,
    confirmationMultiplier: bigint
  ];
  export interface OutputObject {
    dstEid: bigint;
    baseFee: bigint;
    perByteRate: bigint;
    confirmationMultiplier: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobAssignedEvent {
  export type InputTuple = [
    jobId: BytesLike,
    dstEid: BigNumberish,
    headerHash: BytesLike,
    payloadHash: BytesLike,
    confirmations: BigNumberish,
    sender: AddressLike
  ];
  export type OutputTuple = [
    jobId: string,
    dstEid: bigint,
    headerHash: string,
    payloadHash: string,
    confirmations: bigint,
    sender: string
  ];
  export interface OutputObject {
    jobId: string;
    dstEid: bigint;
    headerHash: string;
    payloadHash: string;
    confirmations: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JobVerifiedEvent {
  export type InputTuple = [
    jobId: BytesLike,
    headerHash: BytesLike,
    payloadHash: BytesLike
  ];
  export type OutputTuple = [
    jobId: string,
    headerHash: string,
    payloadHash: string
  ];
  export interface OutputObject {
    jobId: string;
    headerHash: string;
    payloadHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace QuorumThresholdUpdatedEvent {
  export type InputTuple = [newThreshold: BigNumberish];
  export type OutputTuple = [newThreshold: bigint];
  export interface OutputObject {
    newThreshold: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryUpdatedEvent {
  export type InputTuple = [newTreasury: AddressLike];
  export type OutputTuple = [newTreasury: string];
  export interface OutputObject {
    newTreasury: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorUpdatedEvent {
  export type InputTuple = [
    validator: AddressLike,
    isActive: boolean,
    stake: BigNumberish
  ];
  export type OutputTuple = [
    validator: string,
    isActive: boolean,
    stake: bigint
  ];
  export interface OutputObject {
    validator: string;
    isActive: boolean;
    stake: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WorkerUpdatedEvent {
  export type InputTuple = [newWorker: AddressLike];
  export type OutputTuple = [newWorker: string];
  export interface OutputObject {
    newWorker: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SymbioticDVN extends BaseContract {
  connect(runner?: ContractRunner | null): SymbioticDVN;
  waitForDeployment(): Promise<this>;

  interface: SymbioticDVNInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  assignJob: TypedContractMethod<
    [_param: ILayerZeroDVN.AssignJobParamStruct, _options: BytesLike],
    [bigint],
    "payable"
  >;

  feeConfigs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        baseFee: bigint;
        perByteRate: bigint;
        confirmationMultiplier: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getFee: TypedContractMethod<
    [
      _dstEid: BigNumberish,
      _confirmations: BigNumberish,
      _sender: AddressLike,
      _options: BytesLike
    ],
    [bigint],
    "view"
  >;

  getJob: TypedContractMethod<
    [_jobId: BytesLike],
    [SymbioticDVN.VerificationJobStructOutput],
    "view"
  >;

  getSupportedChains: TypedContractMethod<[], [bigint[]], "view">;

  isJobVerified: TypedContractMethod<[_jobId: BytesLike], [boolean], "view">;

  messageLibs: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  minValidatorStake: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  quorumThreshold: TypedContractMethod<[], [bigint], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setFeeConfig: TypedContractMethod<
    [
      _dstEid: BigNumberish,
      _baseFee: BigNumberish,
      _perByteRate: BigNumberish,
      _confirmationMultiplier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  setMessageLib: TypedContractMethod<
    [_eid: BigNumberish, _messageLib: AddressLike],
    [void],
    "nonpayable"
  >;

  setQuorumThreshold: TypedContractMethod<
    [_threshold: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTreasury: TypedContractMethod<
    [_treasury: AddressLike],
    [void],
    "nonpayable"
  >;

  setUlnLookup: TypedContractMethod<
    [_eid: BigNumberish, _uln: AddressLike],
    [void],
    "nonpayable"
  >;

  setWorker: TypedContractMethod<[_worker: AddressLike], [void], "nonpayable">;

  settlement: TypedContractMethod<[], [string], "view">;

  submitVerification: TypedContractMethod<
    [_jobId: BytesLike, _symbioticProof: BytesLike],
    [void],
    "nonpayable"
  >;

  supportedChains: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  symbioticNetworkId: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  treasury: TypedContractMethod<[], [string], "view">;

  ulnLookup: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  validators: TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint, string] & {
        isActive: boolean;
        stake: bigint;
        lastUpdateBlock: bigint;
        blsPublicKey: string;
      }
    ],
    "view"
  >;

  verificationJobs: TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        boolean,
        string
      ] & {
        headerHash: string;
        payloadHash: string;
        confirmations: bigint;
        dstEid: bigint;
        sender: string;
        fee: bigint;
        timestamp: bigint;
        verified: boolean;
        additionalData: string;
      }
    ],
    "view"
  >;

  votingPowerProvider: TypedContractMethod<[], [string], "view">;

  worker: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "assignJob"
  ): TypedContractMethod<
    [_param: ILayerZeroDVN.AssignJobParamStruct, _options: BytesLike],
    [bigint],
    "payable"
  >;
  getFunction(
    nameOrSignature: "feeConfigs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, boolean] & {
        baseFee: bigint;
        perByteRate: bigint;
        confirmationMultiplier: bigint;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFee"
  ): TypedContractMethod<
    [
      _dstEid: BigNumberish,
      _confirmations: BigNumberish,
      _sender: AddressLike,
      _options: BytesLike
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getJob"
  ): TypedContractMethod<
    [_jobId: BytesLike],
    [SymbioticDVN.VerificationJobStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getSupportedChains"
  ): TypedContractMethod<[], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "isJobVerified"
  ): TypedContractMethod<[_jobId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "messageLibs"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "minValidatorStake"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "quorumThreshold"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeConfig"
  ): TypedContractMethod<
    [
      _dstEid: BigNumberish,
      _baseFee: BigNumberish,
      _perByteRate: BigNumberish,
      _confirmationMultiplier: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMessageLib"
  ): TypedContractMethod<
    [_eid: BigNumberish, _messageLib: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setQuorumThreshold"
  ): TypedContractMethod<[_threshold: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasury"
  ): TypedContractMethod<[_treasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUlnLookup"
  ): TypedContractMethod<
    [_eid: BigNumberish, _uln: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setWorker"
  ): TypedContractMethod<[_worker: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "settlement"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "submitVerification"
  ): TypedContractMethod<
    [_jobId: BytesLike, _symbioticProof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportedChains"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "symbioticNetworkId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "treasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ulnLookup"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validators"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [boolean, bigint, bigint, string] & {
        isActive: boolean;
        stake: bigint;
        lastUpdateBlock: bigint;
        blsPublicKey: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "verificationJobs"
  ): TypedContractMethod<
    [arg0: BytesLike],
    [
      [
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        boolean,
        string
      ] & {
        headerHash: string;
        payloadHash: string;
        confirmations: bigint;
        dstEid: bigint;
        sender: string;
        fee: bigint;
        timestamp: bigint;
        verified: boolean;
        additionalData: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "votingPowerProvider"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "worker"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "FeeConfigUpdated"
  ): TypedContractEvent<
    FeeConfigUpdatedEvent.InputTuple,
    FeeConfigUpdatedEvent.OutputTuple,
    FeeConfigUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "JobAssigned"
  ): TypedContractEvent<
    JobAssignedEvent.InputTuple,
    JobAssignedEvent.OutputTuple,
    JobAssignedEvent.OutputObject
  >;
  getEvent(
    key: "JobVerified"
  ): TypedContractEvent<
    JobVerifiedEvent.InputTuple,
    JobVerifiedEvent.OutputTuple,
    JobVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "QuorumThresholdUpdated"
  ): TypedContractEvent<
    QuorumThresholdUpdatedEvent.InputTuple,
    QuorumThresholdUpdatedEvent.OutputTuple,
    QuorumThresholdUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryUpdated"
  ): TypedContractEvent<
    TreasuryUpdatedEvent.InputTuple,
    TreasuryUpdatedEvent.OutputTuple,
    TreasuryUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorUpdated"
  ): TypedContractEvent<
    ValidatorUpdatedEvent.InputTuple,
    ValidatorUpdatedEvent.OutputTuple,
    ValidatorUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "WorkerUpdated"
  ): TypedContractEvent<
    WorkerUpdatedEvent.InputTuple,
    WorkerUpdatedEvent.OutputTuple,
    WorkerUpdatedEvent.OutputObject
  >;

  filters: {
    "FeeConfigUpdated(uint32,uint256,uint256,uint256)": TypedContractEvent<
      FeeConfigUpdatedEvent.InputTuple,
      FeeConfigUpdatedEvent.OutputTuple,
      FeeConfigUpdatedEvent.OutputObject
    >;
    FeeConfigUpdated: TypedContractEvent<
      FeeConfigUpdatedEvent.InputTuple,
      FeeConfigUpdatedEvent.OutputTuple,
      FeeConfigUpdatedEvent.OutputObject
    >;

    "JobAssigned(bytes32,uint32,bytes32,bytes32,uint64,address)": TypedContractEvent<
      JobAssignedEvent.InputTuple,
      JobAssignedEvent.OutputTuple,
      JobAssignedEvent.OutputObject
    >;
    JobAssigned: TypedContractEvent<
      JobAssignedEvent.InputTuple,
      JobAssignedEvent.OutputTuple,
      JobAssignedEvent.OutputObject
    >;

    "JobVerified(bytes32,bytes32,bytes32)": TypedContractEvent<
      JobVerifiedEvent.InputTuple,
      JobVerifiedEvent.OutputTuple,
      JobVerifiedEvent.OutputObject
    >;
    JobVerified: TypedContractEvent<
      JobVerifiedEvent.InputTuple,
      JobVerifiedEvent.OutputTuple,
      JobVerifiedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "QuorumThresholdUpdated(uint256)": TypedContractEvent<
      QuorumThresholdUpdatedEvent.InputTuple,
      QuorumThresholdUpdatedEvent.OutputTuple,
      QuorumThresholdUpdatedEvent.OutputObject
    >;
    QuorumThresholdUpdated: TypedContractEvent<
      QuorumThresholdUpdatedEvent.InputTuple,
      QuorumThresholdUpdatedEvent.OutputTuple,
      QuorumThresholdUpdatedEvent.OutputObject
    >;

    "TreasuryUpdated(address)": TypedContractEvent<
      TreasuryUpdatedEvent.InputTuple,
      TreasuryUpdatedEvent.OutputTuple,
      TreasuryUpdatedEvent.OutputObject
    >;
    TreasuryUpdated: TypedContractEvent<
      TreasuryUpdatedEvent.InputTuple,
      TreasuryUpdatedEvent.OutputTuple,
      TreasuryUpdatedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "ValidatorUpdated(address,bool,uint256)": TypedContractEvent<
      ValidatorUpdatedEvent.InputTuple,
      ValidatorUpdatedEvent.OutputTuple,
      ValidatorUpdatedEvent.OutputObject
    >;
    ValidatorUpdated: TypedContractEvent<
      ValidatorUpdatedEvent.InputTuple,
      ValidatorUpdatedEvent.OutputTuple,
      ValidatorUpdatedEvent.OutputObject
    >;

    "WorkerUpdated(address)": TypedContractEvent<
      WorkerUpdatedEvent.InputTuple,
      WorkerUpdatedEvent.OutputTuple,
      WorkerUpdatedEvent.OutputObject
    >;
    WorkerUpdated: TypedContractEvent<
      WorkerUpdatedEvent.InputTuple,
      WorkerUpdatedEvent.OutputTuple,
      WorkerUpdatedEvent.OutputObject
    >;
  };
}
